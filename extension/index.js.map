{"version":3,"file":"index.js","sources":["../src/extension/lib/time.ts","../src/extension/lib/timekeeper.ts","../src/extension/est-survival.ts","../src/extension/lib/horaro.ts","../src/extension/programs.ts","../src/extension/index.ts"],"sourcesContent":["export class Time {\r\n  readonly display: string;\r\n  readonly rawInSecond: number;\r\n\r\n  private constructor(rawInSecond: number) {\r\n    this.rawInSecond = rawInSecond;\r\n\r\n    const hours = Math.floor(rawInSecond / 3600);\r\n    const minutes = Math.floor((rawInSecond % 3600) / 60);\r\n    const seconds = Math.floor(rawInSecond % 60);\r\n\r\n    const display =\r\n      (hours > 0 ? hours.toString().padStart(2, '0') + ':' : '') +\r\n      `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n\r\n    this.display = display;\r\n  }\r\n\r\n  public static make = (seconds: number): Time => {\r\n    return new this(seconds);\r\n  };\r\n}\r\n","import { Run, Segment, Timer, TimeSpan } from 'livesplit-core';\r\nimport { Time } from './time';\r\n\r\nexport type TimeStatus = 'in_progress' | 'paused' | 'finished' | 'not_running';\r\n\r\nconst TimerPhase = {\r\n  notRunning: 0,\r\n  running: 1,\r\n  ended: 2,\r\n  paused: 3,\r\n} as const;\r\n\r\nexport class Timekeeper {\r\n  protected livesplit: Timer;\r\n\r\n  constructor(initialSeconds?: number) {\r\n    const run = Run.new();\r\n    run.pushSegment(Segment.new('Finish'));\r\n\r\n    const timer = Timer.new(run);\r\n    if (!timer) {\r\n      throw new Error('Failed to create livesplit timer!');\r\n    }\r\n\r\n    timer.setLoadingTimes(TimeSpan.fromSeconds(0));\r\n    if (initialSeconds && initialSeconds > 0) {\r\n      this.initExistsTime(timer, initialSeconds);\r\n    }\r\n    timer.initializeGameTime();\r\n\r\n    this.livesplit = timer;\r\n  }\r\n\r\n  start(): void {\r\n    const phase = this.livesplit.currentPhase();\r\n    this.livesplit.start();\r\n    this.livesplit.pause();\r\n    this.livesplit.setGameTime(TimeSpan.fromSeconds(0));\r\n    this.livesplit.resume();\r\n\r\n    if (phase !== TimerPhase.notRunning) {\r\n      throw new Error(\r\n        'This would be nothing happened. You need to reset to start timer.',\r\n      );\r\n    }\r\n  }\r\n\r\n  pause(): Time {\r\n    const phase = this.livesplit.currentPhase();\r\n    this.livesplit.pause();\r\n\r\n    if (phase !== TimerPhase.running) {\r\n      throw new Error(\r\n        \"This would be nothing happened. You can pause timer only when it's running.\",\r\n      );\r\n    }\r\n\r\n    return this.currentTime;\r\n  }\r\n\r\n  resume(): void {\r\n    const phase = this.livesplit.currentPhase();\r\n    if (phase === TimerPhase.ended) {\r\n      this.livesplit.undoSplit();\r\n    }\r\n    this.livesplit.resume();\r\n\r\n    if (phase !== TimerPhase.paused && phase !== TimerPhase.ended) {\r\n      throw new Error(\r\n        \"This would be nothing happened. You can resume timer only when it's paused.\",\r\n      );\r\n    }\r\n  }\r\n\r\n  finish(): Time {\r\n    if (this.livesplit.currentPhase() !== TimerPhase.running) {\r\n      this.livesplit.resume();\r\n    }\r\n    this.livesplit.split();\r\n\r\n    const time = this.currentTime;\r\n\r\n    return time;\r\n  }\r\n\r\n  reset(): void {\r\n    this.livesplit.reset(false);\r\n  }\r\n\r\n  initExistsTime(timer: Timer, initSeconds: number): Timer {\r\n    timer.start();\r\n    timer.pause();\r\n    timer.setGameTime(TimeSpan.fromSeconds(initSeconds));\r\n    return timer;\r\n  }\r\n\r\n  get status(): TimeStatus {\r\n    switch (this.livesplit.currentPhase()) {\r\n      case TimerPhase.paused:\r\n        return 'paused';\r\n      case TimerPhase.running:\r\n        return 'in_progress';\r\n      case TimerPhase.notRunning:\r\n        return 'not_running';\r\n      default:\r\n        return 'finished';\r\n    }\r\n  }\r\n\r\n  get currentTime(): Time {\r\n    const totalSeconds = this.currentTimeSeconds;\r\n\r\n    return Time.make(totalSeconds);\r\n  }\r\n\r\n  get currentTimeSeconds(): number {\r\n    return this.livesplit.currentTime().gameTime()?.totalSeconds() || 0;\r\n  }\r\n}\r\n","import NodeCG from 'nodecg/types';\r\nimport { ServerNodecgInstance } from '../nodecg/nodecg';\r\nimport { Timekeeper } from './lib/timekeeper';\r\nimport { RunDataActiveRun } from '../nodecg/externals/speedcontrol';\r\nimport { Time } from './lib/time';\r\n\r\nconst estSurvival = (nodecg: ServerNodecgInstance) => {\r\n  const tickRateMs = 100;\r\n\r\n  const timekeepingRep = nodecg.Replicant('timekeeping', {\r\n    defaultValue: {\r\n      time: {\r\n        display: '00:00',\r\n        rawInSecond: 0,\r\n      },\r\n      status: 'finished',\r\n    },\r\n  });\r\n  const penaltyRep = nodecg.Replicant('est-penalties', {\r\n    defaultValue: 0,\r\n  });\r\n  const estTimesRep = nodecg.Replicant('est-times', {\r\n    defaultValue: {\r\n      display: '00:00',\r\n      rawInSecond: 0,\r\n    },\r\n  });\r\n  const currentRunRep = (\r\n    nodecg as unknown as NodeCG.ServerAPI\r\n  ).Replicant<RunDataActiveRun>('runDataActiveRun', 'nodecg-speedcontrol');\r\n\r\n  const timekeeper = new Timekeeper(timekeepingRep.value.time.rawInSecond);\r\n  if (timekeepingRep.value.status === 'in_progress') {\r\n    timekeeper.resume();\r\n  }\r\n\r\n  const tick = () => {\r\n    const time = timekeeper.currentTime;\r\n    const status = timekeeper.status;\r\n\r\n    if (penaltyRep.value !== undefined && currentRunRep.value?.estimateS) {\r\n      const totalTime = currentRunRep.value.estimateS;\r\n      const penaltyTime = penaltyRep.value * 60;\r\n      const totalTimeWithPenalty = totalTime - penaltyTime;\r\n      const currentTime = Time.make(\r\n        Math.max(totalTimeWithPenalty - time.rawInSecond, 0),\r\n      );\r\n\r\n      estTimesRep.value = {\r\n        display: currentTime.display,\r\n        rawInSecond: currentTime.rawInSecond,\r\n      };\r\n\r\n      if (currentTime.rawInSecond <= 0) {\r\n        nodecg.sendMessage('est:over');\r\n      }\r\n    }\r\n\r\n    timekeepingRep.value = { time, status };\r\n  };\r\n\r\n  setInterval(tick, tickRateMs);\r\n\r\n  nodecg.listenFor('est:start', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      timekeeper.start();\r\n    } catch (e) {\r\n      if (cb && e instanceof Error) {\r\n        cb(e);\r\n      }\r\n    }\r\n\r\n    cb(null);\r\n  });\r\n\r\n  nodecg.listenFor('est:pause', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      timekeeper.pause();\r\n      cb(null);\r\n    } catch (e) {\r\n      if (cb && e instanceof Error) {\r\n        cb(e);\r\n      }\r\n    }\r\n  });\r\n\r\n  nodecg.listenFor('est:resume', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      timekeeper.resume();\r\n    } catch (e) {\r\n      if (cb && e instanceof Error) {\r\n        cb(e);\r\n      }\r\n    }\r\n\r\n    cb(null);\r\n  });\r\n\r\n  nodecg.listenFor('est:finish', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      timekeeper.finish();\r\n      cb(null);\r\n    } catch (e) {\r\n      if (cb && e instanceof Error) {\r\n        cb(e);\r\n      }\r\n    }\r\n  });\r\n\r\n  nodecg.listenFor('est:reset', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      timekeeper.reset();\r\n      penaltyRep.value = 0;\r\n      cb(null);\r\n    } catch (e) {\r\n      if (cb && e instanceof Error) {\r\n        cb(e);\r\n      }\r\n    }\r\n  });\r\n\r\n  nodecg.listenFor('est:plus', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    penaltyRep.value += 1;\r\n    cb(null);\r\n  });\r\n\r\n  nodecg.listenFor('est:minus', (_, cb) => {\r\n    if (!cb || cb.handled) {\r\n      return;\r\n    }\r\n\r\n    penaltyRep.value = Math.max(0, penaltyRep.value - 1);\r\n    cb(null);\r\n  });\r\n};\r\n\r\nexport default estSurvival;\r\n","import got from 'got';\r\n\r\nconst BASE_URL = 'https://horaro.org/-/api/v1';\r\n\r\ntype HoraroResponse<D> = {\r\n  data: D;\r\n};\r\n\r\ntype Schedule = {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  columns: string[];\r\n  items: ScheduleItem[];\r\n};\r\n\r\ntype ScheduleItem = {\r\n  length_t: number;\r\n  data: string[];\r\n};\r\n\r\n/**\r\n * Fetches a specific schedule by ID or slug.\r\n * @param {string} event - The ID or slug of the event.\r\n * @param {string} idOrSlug - The ID or slug of the schedule.\r\n * @returns {Promise<HoraroResponse<Schedule>>} - The response containing the schedule details.\r\n */\r\nexport async function fetchScheduleByIdOrSlug(\r\n  event: string,\r\n  idOrSlug: string,\r\n): Promise<HoraroResponse<Schedule>> {\r\n  const url = `${BASE_URL}/events/${event}/schedules/${idOrSlug}`;\r\n  return got(url).json();\r\n}\r\n","import { ServerNodecgInstance } from '../nodecg/nodecg';\r\nimport { Program } from '../nodecg/replicants';\r\nimport { fetchScheduleByIdOrSlug } from './lib/horaro';\r\nimport { err, ok } from 'neverthrow';\r\n\r\nconst defaultProgram: Program = {\r\n  name: '',\r\n  estimate: '0:00:00',\r\n  estimateInSeconds: 0,\r\n};\r\n\r\nconst horaroUrlToSlugs = (url: string) => {\r\n  const match = url.match(/horaro\\.org\\/([^/]+)\\/([^/]+)/);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  return {\r\n    event: match[1],\r\n    slug: match[2],\r\n  };\r\n};\r\n\r\nconst fetchColumns = async (url: string) => {\r\n  const slugs = horaroUrlToSlugs(url);\r\n  if (!slugs) {\r\n    return err('Invalid URL');\r\n  }\r\n\r\n  const { event, slug } = slugs;\r\n  const schedule = await fetchScheduleByIdOrSlug(event, slug);\r\n\r\n  return ok(schedule.data.columns);\r\n};\r\n\r\nconst fetchScheduleItems = async (url: string, columns: { title: number }) => {\r\n  const slugs = horaroUrlToSlugs(url);\r\n  if (!slugs) {\r\n    return err('Invalid URL');\r\n  }\r\n\r\n  const { event, slug } = slugs;\r\n  const schedule = await fetchScheduleByIdOrSlug(event, slug);\r\n\r\n  if (columns.title >= schedule.data.columns.length) {\r\n    return err('Invalid column index');\r\n  }\r\n\r\n  const items = schedule.data.items.map(item => ({\r\n    name: item.data[columns.title],\r\n    estimateInSeconds: item.length_t,\r\n  }));\r\n\r\n  return ok(items);\r\n};\r\n\r\nconst secondsToTimePresentation = (seconds: number) => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = seconds % 60;\r\n\r\n  return `${hours}:${minutes.toString().padStart(2, '0')}:${secs\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n};\r\n\r\nconst programs = (nodecg: ServerNodecgInstance) => {\r\n  const logger = new nodecg.Logger('programs');\r\n  const programsRep = nodecg.Replicant('programs', {\r\n    defaultValue: [],\r\n  });\r\n  nodecg.Replicant('current-program', {\r\n    defaultValue: defaultProgram,\r\n  });\r\n\r\n  nodecg.listenFor('programs:getColumns', async ({ url }, cb) => {\r\n    if (!cb || cb?.handled) {\r\n      return;\r\n    }\r\n    const columns = await fetchColumns(url);\r\n    if (columns.isErr()) {\r\n      logger.error(`Failed to fetch columns: ${columns.error}`);\r\n      return cb(columns.error);\r\n    }\r\n\r\n    logger.info(`Fetched columns: ${columns.value}`);\r\n    return cb(null, { columns: columns.value });\r\n  });\r\n\r\n  nodecg.listenFor('programs:loadSchedule', async ({ url, columns }, cb) => {\r\n    if (!cb || cb?.handled) {\r\n      return;\r\n    }\r\n    const items = await fetchScheduleItems(url, columns);\r\n    if (items.isErr()) {\r\n      logger.error(`Failed to fetch schedule items: ${items.error}`);\r\n      return cb(items.error);\r\n    }\r\n\r\n    programsRep.value = items.value.map(item => ({\r\n      ...item,\r\n      estimate: secondsToTimePresentation(item.estimateInSeconds),\r\n    }));\r\n\r\n    return cb(null);\r\n  });\r\n};\r\n\r\nexport default programs;\r\n","import { ServerNodecgInstance } from '../nodecg/nodecg.js';\r\nimport estSurvival from './est-survival.js';\r\nimport programs from './programs.js';\r\n\r\nexport default (nodecg: ServerNodecgInstance) => {\r\n  programs(nodecg);\r\n  estSurvival(nodecg);\r\n};\r\n"],"names":["__publicField","Run","Segment","Timer","TimeSpan","got","err","ok"],"mappings":"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"}