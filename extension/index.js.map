{"version":3,"file":"index.js","sources":["../src/extension/lib/horaro.ts","../src/extension/programs.ts","../src/extension/index.ts"],"sourcesContent":["import got from 'got';\r\n\r\nconst BASE_URL = 'https://horaro.org/-/api/v1';\r\n\r\ntype HoraroResponse<D> = {\r\n  data: D;\r\n};\r\n\r\ntype Schedule = {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  columns: string[];\r\n  items: ScheduleItem[];\r\n};\r\n\r\ntype ScheduleItem = {\r\n  length_t: number;\r\n  data: string[];\r\n};\r\n\r\n/**\r\n * Fetches a specific schedule by ID or slug.\r\n * @param {string} event - The ID or slug of the event.\r\n * @param {string} idOrSlug - The ID or slug of the schedule.\r\n * @returns {Promise<HoraroResponse<Schedule>>} - The response containing the schedule details.\r\n */\r\nexport async function fetchScheduleByIdOrSlug(\r\n  event: string,\r\n  idOrSlug: string,\r\n): Promise<HoraroResponse<Schedule>> {\r\n  const url = `${BASE_URL}/events/${event}/schedules/${idOrSlug}`;\r\n  return got(url).json();\r\n}\r\n","import { ServerNodecgInstance } from '../nodecg/nodecg';\r\nimport { Program } from '../nodecg/replicants';\r\nimport { fetchScheduleByIdOrSlug } from './lib/horaro';\r\nimport { err, ok } from 'neverthrow';\r\n\r\nconst defaultProgram: Program = {\r\n  name: '',\r\n  estimate: '0:00:00',\r\n  estimateInSeconds: 0,\r\n};\r\n\r\nconst horaroUrlToSlugs = (url: string) => {\r\n  const match = url.match(/horaro\\.org\\/([^/]+)\\/([^/]+)/);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  return {\r\n    event: match[1],\r\n    slug: match[2],\r\n  };\r\n};\r\n\r\nconst fetchColumns = async (url: string) => {\r\n  const slugs = horaroUrlToSlugs(url);\r\n  if (!slugs) {\r\n    return err('Invalid URL');\r\n  }\r\n\r\n  const { event, slug } = slugs;\r\n  const schedule = await fetchScheduleByIdOrSlug(event, slug);\r\n\r\n  return ok(schedule.data.columns);\r\n};\r\n\r\nconst fetchScheduleItems = async (url: string, columns: { title: number }) => {\r\n  const slugs = horaroUrlToSlugs(url);\r\n  if (!slugs) {\r\n    return err('Invalid URL');\r\n  }\r\n\r\n  const { event, slug } = slugs;\r\n  const schedule = await fetchScheduleByIdOrSlug(event, slug);\r\n\r\n  if (columns.title >= schedule.data.columns.length) {\r\n    return err('Invalid column index');\r\n  }\r\n\r\n  const items = schedule.data.items.map(item => ({\r\n    name: item.data[columns.title],\r\n    estimateInSeconds: item.length_t,\r\n  }));\r\n\r\n  return ok(items);\r\n};\r\n\r\nconst secondsToTimePresentation = (seconds: number) => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = seconds % 60;\r\n\r\n  return `${hours}:${minutes.toString().padStart(2, '0')}:${secs\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n};\r\n\r\nconst programs = (nodecg: ServerNodecgInstance) => {\r\n  const logger = new nodecg.Logger('programs');\r\n  const programsRep = nodecg.Replicant('programs', {\r\n    defaultValue: [],\r\n  });\r\n  const currentProgram = nodecg.Replicant('current-program', {\r\n    defaultValue: defaultProgram,\r\n  });\r\n\r\n  nodecg.listenFor('programs:getColumns', async ({ url }, cb) => {\r\n    if (!cb || cb?.handled) {\r\n      return;\r\n    }\r\n    const columns = await fetchColumns(url);\r\n    if (columns.isErr()) {\r\n      logger.error(`Failed to fetch columns: ${columns.error}`);\r\n      return cb(columns.error);\r\n    }\r\n\r\n    logger.info(`Fetched columns: ${columns.value}`);\r\n    return cb(null, { columns: columns.value });\r\n  });\r\n\r\n  nodecg.listenFor('programs:loadSchedule', async ({ url, columns }, cb) => {\r\n    if (!cb || cb?.handled) {\r\n      return;\r\n    }\r\n    const items = await fetchScheduleItems(url, columns);\r\n    if (items.isErr()) {\r\n      logger.error(`Failed to fetch schedule items: ${items.error}`);\r\n      return cb(items.error);\r\n    }\r\n\r\n    programsRep.value = items.value.map(item => ({\r\n      ...item,\r\n      estimate: secondsToTimePresentation(item.estimateInSeconds),\r\n    }));\r\n\r\n    return cb(null);\r\n  });\r\n};\r\n\r\nexport default programs;\r\n","import { ServerNodecgInstance } from '../nodecg/nodecg.js';\r\nimport programs from './programs.js';\r\n\r\nexport default (nodecg: ServerNodecgInstance) => {\r\n  programs(nodecg);\r\n};\r\n"],"names":["got","err","ok"],"mappings":"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"}